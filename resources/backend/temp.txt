from flask import Flask, request, jsonify
from flask_cors import CORS
import tensorflow as tf
import numpy as np
import os
from preprocess import preprocess_image  # Import your preprocess function
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import pandas as pd
import shutil

# Initialize Flask app
app = Flask(__name__)
CORS(app)

# Load the pre-trained model
model = tf.keras.models.load_model("model_resnet50_v4.keras")

# Constants
IMG_SIZE = 224  # Target image size for the model
PROCESSED_FOLDER = "./processed"  # Folder for preprocessed images


def clean_up_folder(folder_path):
    """
    Removes all files and subfolders in the specified folder path.
    """
    if os.path.exists(folder_path):
        shutil.rmtree(folder_path)
    os.makedirs(folder_path, exist_ok=True)


@app.route('/predict', methods=['POST'])
def predict():
    try:
        # Clean up the processed folder
        clean_up_folder(PROCESSED_FOLDER)

        # Check if the request contains an image path
        if 'image_path' not in request.form:
            return jsonify({'error': 'No image path provided'}), 400

        # Get the full image path from the request
        image_path = request.form['image_path']

        # Check if the file exists
        if not os.path.exists(image_path):
            return jsonify({'error': f'Image not found at {image_path}'}), 404

        # Extract the image name from the path
        image_name = os.path.basename(image_path)

        # Preprocess the image
        preprocess_image(file=image_name.split('.')[0], source=os.path.dirname(image_path), destination=PROCESSED_FOLDER)

        # Prepare the DataFrame for ImageDataGenerator
        df = pd.DataFrame({'file_name': [image_name]})
        complete_datagen = ImageDataGenerator(rescale=1.0 / 255)
        complete_generator = complete_datagen.flow_from_dataframe(
            dataframe=df,
            directory=PROCESSED_FOLDER,
            x_col="file_name",
            target_size=(IMG_SIZE, IMG_SIZE),
            batch_size=1,
            shuffle=False,
            class_mode=None
        )

        # Predict using the model
        batch = next(complete_generator)  # Fetch the next batch
        batch = tf.convert_to_tensor(batch, dtype=tf.float32)  # Ensure the correct tensor type
        prediction = model.predict(batch)
        result = int(np.argmax(prediction[0]))
        prediction_list = prediction[0].tolist()
        return jsonify({
            'prediction': result,
            'prediction_list': prediction_list,
            'preprocessed_image': os.path.join(PROCESSED_FOLDER, image_name)
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
